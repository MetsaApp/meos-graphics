package templates

templ layout(title string, simulationEnabled bool) {
	<!DOCTYPE html>
	<html lang="en" class="h-full">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title } - MeOS Graphics</title>
			<link rel="stylesheet" href="/static/css/styles.css"/>
			<script src="/static/js/htmx.min.js"></script>
		</head>
		<body class="h-full bg-gray-50">
			<div class="min-h-full">
				<nav class="bg-white shadow">
					<div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
						<div class="flex h-16 justify-between">
							<div class="flex">
								<div class="flex flex-shrink-0 items-center">
									<h1 class="text-xl font-bold">MeOS Graphics</h1>
								</div>
							</div>
							<div class="flex items-center space-x-4">
								<div id="simulation-status" class={ templ.KV("hidden", !simulationEnabled), "text-sm" }>
									<span class="font-medium">Simulation:</span>
									<span id="simulation-phase" class="text-blue-600"></span>
									<span class="text-gray-500">(<span id="simulation-next"></span>)</span>
								</div>
								<a href="/docs" class="text-sm text-blue-600 hover:text-blue-800">API Documentation</a>
								<span id="connection-status" class="text-sm text-gray-500">
									<span class="inline-block h-2 w-2 rounded-full bg-gray-400"></span>
									Disconnected
								</span>
							</div>
						</div>
					</div>
				</nav>
				<main>
					{ children... }
				</main>
			</div>
			@sseScript(simulationEnabled)
		</body>
	</html>
}

templ sseScript(simulationEnabled bool) {
	<script>
		// Initialize SSE connection
		document.addEventListener('DOMContentLoaded', function() {
			const evtSource = new EventSource('/sse');
			
			evtSource.onopen = function() {
				console.log('SSE connection opened');
				document.getElementById('connection-status').innerHTML = 
					'<span class="inline-block h-2 w-2 rounded-full bg-green-400"></span> Connected';
			};
			
			evtSource.onerror = function(err) {
				console.error('SSE error:', err);
				document.getElementById('connection-status').innerHTML = 
					'<span class="inline-block h-2 w-2 rounded-full bg-red-400"></span> Disconnected';
			};
			
			evtSource.addEventListener('connected', function(e) {
				console.log('Connected event:', e.data);
				document.getElementById('connection-status').innerHTML = 
					'<span class="inline-block h-2 w-2 rounded-full bg-green-400"></span> Connected';
			});
			
			evtSource.addEventListener('update', function(e) {
				console.log('Update event:', e.data);
				// Trigger HTMX refresh on all elements with refresh-data trigger
				htmx.trigger(document.body, 'refresh-data');
			});
			
			evtSource.addEventListener('heartbeat', function(e) {
				console.log('Heartbeat:', e.data);
			});
			
			if simulationEnabled {
				// Update simulation status
				function updateSimulationStatus() {
					fetch('/simulation/status')
						.then(res => res.json())
						.then(data => {
							const statusDiv = document.getElementById('simulation-status');
							if (data.enabled) {
								statusDiv.classList.remove('hidden');
								document.getElementById('simulation-phase').textContent = data.phase;
								const mins = Math.floor(data.nextPhaseIn / 60);
								const secs = Math.floor(data.nextPhaseIn % 60);
								document.getElementById('simulation-next').textContent = 
									mins > 0 ? mins + 'm ' + secs + 's' : secs + 's';
							} else {
								statusDiv.classList.add('hidden');
							}
						})
						.catch(err => console.error('Failed to fetch simulation status:', err));
				}
				
				// Update simulation status every second
				updateSimulationStatus();
				setInterval(updateSimulationStatus, 1000);
			}
		});
	</script>
}